{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { memo, useRef, useEffect } from \"react\";\nimport anime from \"animejs\";\nimport styled from \"styled-components\";\n\nvar Slick = function Slick(_ref) {\n  var images = _ref.images,\n      duration = _ref.duration,\n      delay = _ref.delay,\n      onChange = _ref.onChange;\n  var ref = useRef(null);\n  var isInitialRenderedRef = useRef(false);\n  useEffect(function () {\n    var targets = ref.current;\n    if (!targets) return;\n\n    function runSlideShow() {\n      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      anime({\n        targets: targets,\n        translateX: \"-\".concat(page * 100, \"%\"),\n        duration: duration || 1000,\n        delay: delay || 5000,\n        easing: \"easeInOutQuart\",\n        complete: function complete() {\n          onChange && onChange(images[page]);\n          runSlideShow((page + 1) % images.length);\n        }\n      });\n    }\n\n    if (!isInitialRenderedRef.current) runSlideShow();\n    isInitialRenderedRef.current = true;\n  }, [delay, duration, images, onChange]);\n  return __jsx(Container, null, __jsx(\"div\", {\n    ref: ref\n  }, images.map(function (image) {\n    return __jsx(\"img\", {\n      src: image,\n      key: image\n    });\n  })));\n};\n\nvar Container = styled.div.withConfig({\n  componentId: \"sc-1i1bavs-0\"\n})([\"width:100%;height:100%;overflow:hidden;& > div{display:flex;img{object-position:left top;object-fit:cover;}}\"]);\nexport default memo(Slick);","map":null,"metadata":{},"sourceType":"module"}